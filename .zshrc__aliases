##############################################################
# Dev Utils
##############################################################

format() {
  echo "💅 Formatting files with Prettier...";
  npx prettier --write --loglevel=error .;
  echo "✅ Done formatting";
}
lint() {
  echo "🔎 Linting files with ESLint...";
  npx eslint . --ext js,jsx,ts,tsx;
  echo "✅ Done linting";
}
tc() {
  echo "🧐 Type-checking files with TypeScript...";
  npx tsc --noEmit;
  echo "✅ Done type-checking";
}
jest() {
  echo "🧪 Testing files changed on branch...";
  npx jest --changedSince=$(git_dev_branch) --coverage=false;
  echo "✅ Done testing";
}
jestw() {
  echo "🧪👀 Testing files changed on branch on watch...";
  npx jest --changedSince=$(git_dev_branch) --watch --coverage=false;
  echo "✅ Done testing";
}
jesta() {
  echo "🧪 Testing all files...";
  npx jest --coverage=false;
  echo "✅ Done testing";
}
alias va='tc && test && lint && format'
alias vs='tc && lint && format'

##############################################################
# Git
##############################################################

# "git checkout branch"
alias gcob="git co -b"

# "git commit message" (oh-my-zsh originally has this as "git checkout master", but this makes more sense to me)
alias gcm="gc -m"

# "git pull origin main"
alias gpom="git pull origin \$(git_dev_branch)"

# Git diffing with origin/master and origin/<dev_branch>
alias gr="git rev"
alias grem="git remote" # (original oh-my-zsh `gr` alias)

# "git undo": "undoes" the last commit, and puts its changes back into the index
alias gundo="git reset HEAD~"
# "git undo soft/staged": "undoes" the last commit, and puts its changes into the staging area
alias gundos="git reset HEAD~ --soft"

# "git abandon": See .gitconfig alias for details
alias gab="git abandon"

# "git branch modify": Rename a branch
alias gbm="git branch -m"

alias gap="git add --patch"

# Remap oh-my-zsh's default `gup`
alias gpr="git pull --rebase"

# Quick commites with `gitupdate` go package
alias gup="gitupdate ."

# "git publish": See .gitcnofig alias for details
alias gpub="git publish"

git_dev_branch() {
  if [[ -n $(git branch --list develop) ]]; then 
    echo develop; 
  elif [[ -n $(git branch --list development) ]]; then 
    echo development; 
  elif [[ -n $(git branch --list main) ]]; then
    echo main;
  else 
    echo master; 
  fi 
}

bat_theme="$(defaults read -globalDomain AppleInterfaceStyle &> /dev/null && echo default || echo GitHub)"
alias bat="bat --theme=$bat_theme"
# Diff files with git + syntax highlighting. Taken from the `bat` man page.
batdiff() {
  git diff --name-only --diff-filter=d "$@" | xargs bat --diff --paging=auto  --theme=$theme
}
# Make a shorter alias
alias gd="batdiff"
# Other diff aliases that we also want to use `bat` for
# "git diff origin dev"
alias gdod="git fetch && gd origin/\$(git_dev_branch)"
# "git diff origin main"
alias gdom="git fetch && gd origin/\$(git_main_branch)"
# Replacement alias for vanilla `git diff`
alias gdf="git diff"

##############################################################
# npm
##############################################################

alias ni="npm install"
alias nid="npm install -D"
alias nip="npm install -P"

##############################################################
# Homebrew
##############################################################

alias bi="brew install"

##############################################################
# Miscellaneous
##############################################################

# Open fzf files with vim by default
alias goto="vim -o \`fzf\`"
# Make sure dotfiles are shown by ls
alias ls="ls -A"
# List directories
alias lsd="ls -d */"
# Log ip to console
alias myip="curl http://ipecho.net/plain; echo"
# Change ping to stop after 5 pings
alias ping="ping -c 5"
alias c="clear"
# I do these all the time when I'm mucking around with zsh/my .zshrc
alias ez="exec zsh"
alias sz="source ~/.zshrc"
alias alg="alias | grep"

# Clears the screen and runs the succeeding command(s)
run() {
  clear;
  eval $@;
}
