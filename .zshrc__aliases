##############################################################
# Dev Utils
##############################################################

format() {
  echo "💅 Formatting files with Prettier...";
  if [[ -e yarn.lock ]]; then
    yarn prettier --write --loglevel=error .;
  else
    npx prettier --write --loglevel=error .;
  fi
  echo "✅ Done formatting";
}
lint() {
  echo "🔎 Linting files with ESLint...";
  yarn eslint . --ext js,jsx,ts,tsx;
  echo "✅ Done linting";
}
tc() {
  echo "🧐 Type-checking files with TypeScript...";
  yarn tsc $@ --noEmit;
  echo "✅ Done type-checking";
}
jest() {
  echo "🧪 Testing files changed on branch...";
  yarn jest --changedSince=$(git_dev_branch) --coverage=false;
  echo "✅ Done testing";
}
jestw() {
  echo "🧪👀 Testing files changed on branch on watch...";
  yarn jest --changedSince=$(git_dev_branch) --watch --coverage=false;
  echo "✅ Done testing";
}
jesta() {
  echo "🧪 Testing all files...";
  yarn jest --coverage=false;
  echo "✅ Done testing";
}
alias va='tc && test && lint && format'
alias vs='tc && lint && format'

##############################################################
# Git
##############################################################

# "git checkout branch"
alias gcob="git co -b"

# "git checkout main/dev"
alias gcom="git co \$(git_main_branch)"
alias gcod="git co \$(git_dev_branch)"

# "git commit message"
alias gcm="gc -m"

# "git pull origin main"
alias gpom="git pull origin \$(git_main_branch)"
# "git pull origin dev"
alias gpod="git pull origin \$(git_dev_branch)"

# "git diff origin dev"
alias gdod="git fetch && gd origin/\$(git_dev_branch)"
# "git diff origin main"
alias gdom="git fetch && gd origin/\$(git_main_branch)"

# Git diffing with origin/master and origin/<dev_branch>
alias gr="git rev"
alias grem="git remote" # (original oh-my-zsh `gr` alias)

# "git undo": "undoes" the last commit, and puts its changes back into the index
alias gundo="git reset HEAD~"
# "git undo soft/staged": "undoes" the last commit, and puts its changes into the staging area
alias gundos="git reset HEAD~ --soft"

# "git abandon": See .gitconfig alias for details
alias gab="git abandon"

# "git branch modify": Rename a branch
alias gbm="git branch -m"

alias gap="git add --patch"

# Remap oh-my-zsh's default `gup`
alias gpr="git pull --rebase"

# Quick commites with `gitupdate` go package
alias gup="gitupdate ."

# "git publish": See .gitcnofig alias for details
alias gpub="git publish"

# "git fixup": Quick fixup commits
alias gix="git commit -m 'fixup'"
alias gixa="git commit -a -m 'fixup'"

# "git authors": See how many lines of code each dev/author is responsible for
# Source: https://stackoverflow.com/questions/4589731/git-blame-commit-statistics
alias gauth="git ls-tree -r -z --name-only HEAD -- $1 | xargs -0 -n1 git blame \
--line-porcelain HEAD |grep  '^author '|sort|uniq -c|sort -nr"

git_dev_branch() {
  if [[ -n $(git branch --list develop) ]]; then 
    echo develop; 
  elif [[ -n $(git branch --list development) ]]; then 
    echo development; 
  elif [[ -n $(git branch --list main) ]]; then
    echo main;
  else 
    echo master; 
  fi 
}

##############################################################
# Bat and Delta
##############################################################

# Decide the theme based on macOS dark mode
bat_theme="$(defaults read -globalDomain AppleInterfaceStyle &> /dev/null && echo default || echo GitHub)"
alias bat="bat --theme=$bat_theme"
alias cat="bat"

# Decide the theme based on macOS dark mode
delta_theme="$(defaults read -globalDomain AppleInterfaceStyle &> /dev/null && echo Monokai Extended || echo GitHub)"
alias delta="delta --syntax-theme=$delta_theme"

# To make sure git uses Delta, _with_ the theme we've decided on :)
export GIT_PAGER="delta --syntax-theme=$delta_theme"
# Oh, and since you can't use environment variables in your ~/.gitconfig, we're going to manually set the "system" gitconfig here based on $delta_theme, to make sure intractive git commands (e.g. `git add -p`) are also pretty 💅
git config --system interactive.diffFilter "delta --color-only --syntax-theme=$delta_theme"

##############################################################
# npm
##############################################################

alias ni="npm install"
alias nid="npm install -D"
alias nip="npm install -P"

##############################################################
# Homebrew
##############################################################

alias bi="brew install"

##############################################################
# Miscellaneous
##############################################################

# Open fzf files with vim by default
alias goto="vim -o \`fzf\`"
# Make sure dotfiles are shown by ls
alias ls="ls -A"
# List directories
alias lsd="ls -d */"
# Log ip to console
alias myip="curl http://ipecho.net/plain; echo"
# Change ping to stop after 5 pings
alias ping="ping -c 5"
# I do these all the time when I'm mucking around with zsh/my .zshrc
alias ez="exec zsh"
alias sz="source ~/.zshrc"
alias alg="alias | grep"
# "bundle id": Given the path to an app, gives the app's bundle id
# Source: https://superuser.com/questions/346369/getting-the-bundle-identifier-of-an-os-x-application-in-a-shell-script
alias bid="mdls -name kMDItemCFBundleIdentifier -r"

# Clears the screen and runs the succeeding command(s)
c() {
  clear;
  eval $@;
}
