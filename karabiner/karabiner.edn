;; !  | means mandatory -   modifier(s) alone when pressend change behavior
;; #  | means optional  -   modifiers are optional (but atleast one necessary)
;; ## | optional any
;; !! | command + control + optional + shift (hyper)
;; C  | left_command (Emacs: hyper)
;; T  | left_control (Emacs: control)
;; O  | left_option (Emacs: meta)
;; S  | left_shift
;; F  | fn (Emacs: super)
;; Q  | right_command (Emacs: control)
;; W  | right_control (Emacs: control)
;; E  | right_option (Emacs: )
;; R  | right_shift

{
  :profiles {
    :Goku {
      :default true
      :sim 40
      :delay 500
      :alone 200
      :held 250
    }
  }
  :simlayer-threshold 210

  :tos {
    :same_wind_app      {:key :grave_accent_and_tilde :modi [:left_command] :lazy true}
    :prev_app           {:key :tab :modi [:left_command] :lazy true}
    :left_paren         {:key :9 :modi [:left_shift] :lazy true}
    :right_paren        {:key :0 :modi [:left_shift] :lazy true}
    :left_control_lazy  {:key :left_control :lazy true}
    :right_control_lazy  {:key :right_control :lazy true}
    :left_cmd_lazy      {:key :left_command :lazy true}
  }

  :modifiers {
    :ro :right_option
  }

  :templates {
    :launch      "osascript -e 'tell application \"Alfred 4\" to run trigger \"launch%s\" in workflow \"yqrashawn.workflow.launcher\" with argument \"\"'"
    :alfred         "open /Applications/Alfred\\ 4.app && osascript -e 'tell application \"Alfred 4\" to run trigger \"%s\" in workflow \"%s\" with argument \"%s\"'"
    :open        "open \"%s\""
    :opena       "open -a \"%s\" %s"
    :openw       "open \"https://%s\""
    :show        "osascript -e 'set appName to \"%s\"\nset startIt to false\ntell application \"System Events\"\n  if not (exists process appName) then\n    set startIt to true\n  else\n    set frontmost of process appName to true\n  end if\nend tell\nif startIt then\n  tell application appName to activate\nend if'\n"
    :toggle      "osascript -e 'set appName to \"%s\"\nset startIt to false\ntell application \"System Events\"\n  if not (exists process appName) then\n    set startIt to true\n  else if frontmost of process appName then\n    set visible of process appName to false\n  else\n    set frontmost of process appName to true\n  end if\nend tell\nif startIt then\n  tell application appName to activate\nend if'"
    :type        "osascript -e 'tell application \"System Events\" to keystroke \"%s\" as text'"
    ;; :wait        "osascript -e 'delay 1'"
    ; Doesn't work :(
    ; :emoji       "osascipt -e 'set the clipboard to \"%s\" \n tell application \"System Events\" to keystroke \"v\" using command down'"
    :unicode      "osascript -e 'tell application \"System Events\" to keystroke (\"%s\" as Unicode text)'"
    ; :focus      "/usr/local/bin/yabai -m display --focus \"%s\" & /usr/local/bin/yabai -m space --focus \"%s\""
  }

  ; Layers: Pro is that you can hold down and do multiple simultaneously. Con is that if you type another character quickly, it won't register
  ; Simlayers: Pro is that it's super robust; can do multiple, never going to type something you don't want. Con is that it slows down the character getting registered (I think by the `:simlayer-threshold` below)

  :simlayers {
    :q-mode { :key :q }
    :x-mode { :key :x }
    :z-mode { :key :z }
    ;; :symbol-mode { :key :quote }
  }

  :main [
    ; Plain rule ideas:
      ; Swap ; and : (seems useful, but drifts away from normal keyboard a lot)
      ; Semicolon as shift key (pretty good -- might even help with ⌘+⇧ keybinding ergonomics)
      ; Using simultaneous keypresses to enter some kind of modal/context. ⎋ exits it (see Shawn's "in-context" mode) (this is pretty cool. Plus, I don't think simultaenous rules end up creating lag. Could use it for a lot of things. Examples `s+d`, `j+k`)
      ; Using simultaneous keypresses for singular actions (might be cool, though something to keep an eye on is the difficulty of pressing the keys simultaneously)

    ; Hyper key ideas: (only when used alone -- see Shawn's usage for "left option when used alone")
      ; Left control
      ; Left option

    ; Simlayer ideas:
      ; Having simlayers dependent on the app (Shawn) (`s` mode in VS Code, `s` mode in Chrome, etc.)
      ; Using a simlayer for websites specifically (cool, but not sure if there's enough common websites for this to be worth it)
      ; Having a simlayer for Alfred workflows (see Nikita's) (might be worth it someday, but those workflows are still maturing, and keywords are fine for now)
      ; Using a simlayer for the ctrl key, e.g. `a` (cool, but a simlayer on `a` is going to be hella annoying)
      ; Using a simlayer for mouse controls (might be useful for when we can see the mouse and we just want to bring focus to wherever it is)
      ; Using a simlayer for ⌘+⇧ (Nikita) (useful for ergonomics)
      ; Using a simlayer for ⌘ (Nikita) (useful for ergonomics)
      ; "Clone repo to ~/clones and open with VS Code" (Nikita) (could be cool -- could look into this)
      ; Using a simlayer for media controls (Nikita)
      ; Using a simlayer to control rectangle (this would be nice -- at the very least could do Maximize and Center)
      ; Using a simlayer to control Chrome debug mode (Shawn) (cool because their keyboard shortcuts are lacking sometimes)

    ; Simlayer key ideas
      ; tilde
      ; backslash (currently used as ctrl key)
      ; tab
      ; slash
      ; period
      ; comma
      ; ======
      ; q, w, x, z, j, numbers
      ; https://en.wikipedia.org/wiki/Letter_frequency

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; General/simple
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    {
      :des "swap : and ;"
      :rules [
        [:semicolon ["semicolon-mode" 1] nil { :afterup ["semicolon-mode" 0] :alone :!Ssemicolon }]
        [:!Ssemicolon :semicolon]
      ]
    }
    {
      :des "left cmd -> cmd+tab"
      :rules [[:left_command :left_command nil {:alone :!Ctab}]]
    }
    {
      :des "left shift -> cmd+b (bold)"
      :rules [[:left_shift :left_shift nil {:alone :!Cb}]]
    }
    {
      :des "enter -> enter (alone) left_control (held)"
      :rules [
        [:##return_or_enter :left_control_lazy nil {:alone :return_or_enter}]
      ]
    }

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; Macros
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    {
      :des "App-specific overrides"
      :rules [
        ; Messages
        [:!Cj :!Ttab :Messages]
        [:!Ck :!TStab :Messages]

        ; Calendar
        [:!Cj :!Cright_arrow :Calendar]
        [:!Ck :!Cleft_arrow :Calendar]
        ;; WIP: A command that triggers a menu item that doesn't have a shortcut (in this case, the "Show Notifications" item in Calendar). Inconsistent right now, as something the `return_or_enter` fires too quickly and doesn't register -- the left/right_arrows are meant to be a hack to delay it, but it's not really working. Trying Keysmith for now
        ;; [:!Cbackslash [:!CSslash :n :o :down_arrow :left_arrow :right_arrow :left_arrow :right_arrow :return_or_enter] :Calendar]

        ; In Chrome, use left_option+enter to return focus to the document (Chrome doesn't provide any way to do this natively)
        ; Keybindings do this: 1) Focus the omnibar 2) type `j`, then `↵`. This runs a "search" I have in Chrome that runs Javascript that focuses the root "frame" of the document. Running Javascript altogether will focus the document, and focusing the root frame helps return focus after an <iframe> has stolen it
        [:!Wspacebar [:!Cl :j :return_or_enter :g :!Sf] :Chrome]
        ; A backup (open preferences, then close the preferences tab)
        ; [:!Oreturn_or_enter [:!Ccomma :!Cw]]

        ; Allow our custom Vim jump navigation with brackets in the terminal. This needs to be done specially for the terminal, since <C-[> specifically means ESC in the terminal
        [:!Wopen_bracket :!To :Terminals]
        [:!Wclose_bracket :!Ti :Terminals]

        ; Cmd+Esc to stop screenshot video
        [:!Cescape :!CTescape]
      ]
    }
    {
      :des "iTerm shortcuts"
      :rules [
        :iTerm

        ; Panes
        ;;;;;
        ; Navigating between panes
        [:!CSh :!Copen_bracket]
        [:!CSl :!Cclose_bracket]
        ; Split pane right
        [:!Csemicolon :!Cd]
        ; Split pane down
        [:!CSsemicolon :!CSd]
      ]
    }
    {
      :des "macros (with right shift)"
      :rules [
        ; Screenshots
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        ; Copy screenshot of selected area
        [:!Rc :!CTS4]
        ; Save screenshot of selected area to screenshots dir (using Alfred workflow). Use CTSO here instead of using an Alfred to avoid the Alfred search bar
        [:!Rd :!CTSOd]

        ; Rectangle
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        ; Window resizing
        [:!Ra :!TOa]
        [:!Rs :!TOs]
        ; Left/right half of current monitor
        [:!Rq :!TOh]
        [:!Rw :!TOl]
        ; Move to next/prev monitor
        [:!Rz :!CTOh]
        [:!Rx :!CTOl]

        ; Alfred
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        [:!Rb [:alfred "history" "com.apple.alfred.workflow.chromium-hist"]]
        [:!Rt [:alfred "bookmarks" "com.apple.alfred.workflow.chromium-hist"]]
        [:!Rr [:alfred "recent history" "com.thomasupton.chrome-history"]]
        ; [:!Rb [:alfred "battery" "com.aronhafner.alfred-battery" "level"]]
        ; Toggle AirPod connection. Using an external trigger doesn't work because it spawns the Alfred search bar (https://www.alfredforum.com/topic/16568-external-trigger-is-showing-search-bar-when-not-necessary/?do=findComment&comment=84848)
        [:!R4 :!CSTOa]
        [:!Rg [:alfred "search repos" "com.lukewaite.alfred-gitlab"]]
        [:!Re [:alfred "search repos" "net.deanishe.alfred-git-repos"]]
        [:!Rtab [:alfred "search" "com.sindresorhus.npms"]]
        [:!Rspacebar [:alfred "add to inbox" "com.mikomagni.trello"]]
      ]
    }
    {
      ;; :des "macros (with left ctrl)"
      :des "macros (with z)"
      :rules [
        :z-mode
        [:u [:alfred "search" "pw.symbols-search"]]
        [:p [:alfred "get passwords" "com.github.sadovnychyi.chromepasswords"]]
        [:m [:alfred "my merge requests" "dev.abramczyk.gitlab"]]
        [:j [:alfred "jira" "jira.steyep"]]
      ]
    }

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; Launchers
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    {
      :des "app launch mode"
      :rules [
        :x-mode
        ;  Most common apps
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        ; Home row right
        ; *Just* browsin'
        [:h [:opena "Google Chrome"] :!Chrome]
        [:h :same_wind_app :Chrome]
        ; VS Code
        [:k [:opena "Visual Studio Code"] :!VSCode]
        [:k :same_wind_app :VSCode]
        ; Some same/left hand alternatives
        [:c [:opena "Google Chrome"] :!Chrome]
        [:c :same_wind_app :Chrome]
        [:v [:opena "Visual Studio Code"] :!VSCode]
        [:v :same_wind_app :VSCode]
        ;  sLack
        [:l [:opena "Slack"]]
        ; [:l [:opena "Slack Web"]]

        ; Also common
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        [:n [:opena "Notes"]]
        [:semicolon [:opena "iTerm"]]
        [:m [:opena "Messages"]]
        [:i [:opena "Trello"]]
        [:u [:opena "Spotify"]]
        [:o [:opena "Office"]]
        [:y [:opena "Calendar"]]
        [:comma [:opena "System Preferences"]]
        [:period [:opena "Alfred Preferences"]]
        [:open_bracket [:opena "Preview"]]
        [:slash [:opena "Finder"]]

        ; Less common
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        [:backslash [:opena "Activity Monitor"]]
        [:8 [:opena "Karabiner-Elements"]]
        [:7 [:opena "Karabiner-EventViewer"]]

        ; Work-specific
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        [:j [:opena "Visual Studio Code" "~/src/work/yotribe-web"]]
        [:0 [:openw "gitlab.com/yotribe/yotribe-web/-/merge_requests"]]
      ]
    }
    {
      :des "websites, common repos"
      :rules [
        :q-mode

        ; Work
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        [:n [:openw "www.notion.so/wonderme/Product-Engineering-Team-831260e699944dc8b51f24382bf7bc40"]]
        [:j [:openw "wonder-me.atlassian.net/jira/software/projects/WD/boards/12?assignee=600ed6c720445000694823cb"]]
        [:k [:openw "wonder-me.atlassian.net/jira/software/projects/WD/boards/12"]]
        [:l [:openw "calendar.google.com/calendar/u/1/r"]]
        [:w [:openw "mail.google.com/mail/u/1"]]
        ;; Add custom emojis to Slack
        [:e [:openw "wonderdotme.slack.com/customize/emoji?utm_source=in-prod&utm_medium=inprod-customize_link-slack_menu-click"]]

        [:m [:openw "mail.google.com/mail/u/0"]]
        [:h [:openw "app.hey.com/"]]
        [:b [:openw "www.schwab.com/public/schwab/client_home"]]
        [:i [:openw "accounts.intuit.com/index.html?offering_id=Intuit.ifs.mint"]]
        [:g [:openw "drive.google.com"]]
        ;; Money projections
        [:p [:openw "docs.google.com/spreadsheets/d/1lMo3BA_I2MRrxaTjVNOaowP0ziiGrmTWvwBGYcxj6Ac/edit#gid=229770528"]]
        [:f [:openw "fast.com/"]]
        [:open_bracket [:openw "www.linkedin.com/in/brett-abramczyk/"]]
        [:y [:openw "youtube.com"]]
        [:o [:openw "amazon.com"]]
        [:0 [:openw "capitalone.com"]]
      ]
    }

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; Text and input
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    {
      ;; Just mapping semicolon to shift gets tricky sometimes, with rules conflicting. So, this way, we get more fine-grained control, and can do things like using the caps lock key in this mode for actual caps lock
      :des "shift mode"
      :rules [
        :semicolon-mode

        [:grave_accent_and_tilde :!Sgrave_accent_and_tilde] ; -> ~
        [:1 :!S1]
        [:2 :!S2]
        [:3 :!S3]
        [:4 :!S4]
        [:5 :!S5]
        [:tab :!Stab]
        [:q :!Sq]
        [:w :!Sw]
        [:e :!Se]
        [:r :!Sr]
        [:t :!St]
        [:y :!Sy]
        [:u :!Su]
        [:i :!Si]
        [:o :!So]
        [:p :!Sp]
        [:a :!Sa]
        [:s :!Ss]
        [:d :!Sd]
        [:f :!Sf]
        [:g :!Sg]
        [:h :!Sh]
        [:j :!Sj]
        [:k :!Sk]
        [:l :!Sl]
        [:z :!Sz]
        [:x :!Sx]
        [:c :!Sc]
        [:v :!Sv]
        [:b :!Sb]
        [:n :!Sn]
        [:m :!Sm]

        ; Combination with other modifiers
        ;
        ; Only have the keys that are otherwise
        ; hard-to-reach with left shift. Also,
        ; Only ⌘ and ⌃ right now
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        ;; Best we can do right now to keep the semicolon as a shift modifier with other keys (like command). Not perfect, since you have to hold down the semicolon before any other modifier
        [:!Ca :!CSa]
        [:!Cs :!CSa]
        [:!Cx :!CSa]
        [:!Cz :!CSa]
        [:!Cq :!CSa]
        [:!Cw :!CSa]
        [:!C1 :!CS1]
        [:!C2 :!CS2]
        [:!C3 :!CS3]
        [:!C4 :!CS4]
        [:!C5 :!CS5]
        [:!Ta :!TSa]
        [:!Ts :!TSa]
        [:!Tx :!TSa]
        [:!Tz :!TSa]
        [:!Tq :!TSa]
        [:!Tw :!TSa]
        [:!T1 :!TS1]
        [:!T2 :!TS2]
        [:!T3 :!TS3]
        [:!T4 :!TS4]
        [:!T5 :!TS5]

        ;; Enter a simulated caps lock mode, instead of triggering actual caps lock. See the mode below for details
        [:caps_lock ["caps-lock-mode" 1]]
      ]
    }
    ;; This mode is necessary, since while in the hardware-defined caps lock "mode", the caps lock key is always the key to exit it -- which prevents the key from being escape/control like it normally is. This causes a weird scenario, where when we're using the hardware's caps lock, the caps lock key customizations are taken away from us, which can be disorienting
    ;; So instead, we have a Goku layer for it -- letters pressed during this mode will be capital, and we still have our escape/control functionality for the actual caps lock key
    {
      :des "simulated caps lock mode"
      :rules [
        :caps-lock-mode

        [:caps_lock :right_control_lazy nil {:alone  ["caps-lock-mode" 0]}]

        [:q :!Sq]
        [:w :!Sw]
        [:e :!Se]
        [:r :!Sr]
        [:t :!St]
        [:y :!Sy]
        [:u :!Su]
        [:i :!Si]
        [:o :!So]
        [:p :!Sp]
        [:a :!Sa]
        [:s :!Ss]
        [:d :!Sd]
        [:f :!Sf]
        [:g :!Sg]
        [:h :!Sh]
        [:j :!Sj]
        [:k :!Sk]
        [:l :!Sl]
        [:z :!Sz]
        [:x :!Sx]
        [:c :!Sc]
        [:v :!Sv]
        [:b :!Sb]
        [:n :!Sn]
        [:m :!Sm]
      ]
    }
    ;; This has to come later, so we can remap with caps lock in shift and caps lock modes
    {
      :des "caps lock -> escape (alone) left_control (held)"
      :rules [
        ; Using right_ctrl lets us use left_control as a hyper key
        [:#CTOSFQWEcaps_lock :right_control_lazy nil {:alone :escape}]
      ]
    }
    {
      :des "Text navigation and manipulation"
      :rules [
        ; Char and word-wise nav
        [:!W#SRh :left_arrow]
        [:!W#SRj :down_arrow]
        [:!W#SRk :up_arrow]
        [:!W#SRl :right_arrow]
        [:!W#SRy :!Oleft_arrow]
        [:!W#SRo :!Oright_arrow]

        ; Char and word-wise deletion
        [:!Wu :!Odelete_or_backspace]
        [:!Wi :delete_or_backspace]
        [:!W7 :!Odelete_forward]
        [:!W8 :delete_forward]

        ; To start and end of line
        [:!W#SRn :!Cleft_arrow :!Terminals]
        [:!W#SRm :!Cright_arrow :!Terminals]
        ; Terminal doesn't support ⌘ like above, so gotta use its Cocoa keybindings
        [:!Wn :!Ta :Terminals]
        [:!Wm :!Te :Terminals]

        ; Line deletion
        ; Use Cocoa emacs bindings for apps that doesn't support ⌘+⌦ (i.e. Notes, Terminal)
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        ; Delete line backward
        [:!Wcomma :!Cdelete_or_backspace [:!Terminals]]
        [:!Wcomma :!Tu [:Terminals]]
        ; Delete line forward
        ; Ideally this would just be ⌘+⌦, but that's not respected everywhere (e.g. browser textareas, VS Code's integrated terminals)
        [:!Wperiod [:!CSright_arrow :delete_or_backspace] [:!Notes :!Terminals :!VSCode]]
        [:!Wperiod :!Tk]
        ; Delete full line
        [:!Wslash [:!Cright_arrow :!Cdelete_or_backspace] [:!Terminals :!VSCode]]
        ; Terminals don't support ⌘+← or ⌘+⌦. So instead, we rely on the original Cocoa Emacs commands for them
        [:!Wslash [:!Te :!Tu] :Terminals]
        ; For VS Code, it's trickier -- you want to preserve indentation, but also want it to behave nicely in the integrated terminal…
        [:!Wslash [:!Cright_arrow :!Cdelete_or_backspace] :VSCode]

        ; Clear everything
        [:!Wdelete_or_backspace [:!Ca :delete_or_backspace]]

        ; Page up/down
        [:!Oj :page_down]
        [:!Ok :page_up]
      ]
    }

    {
      :des "symbol mode"
      :rules [
        :symbol-mode

        [:1 :!S1]
        [:2 :!S2]
        [:3 :!S3]
        [:4 :!S4]
        [:4 :!S5]
        [:q :!S6]
        [:w :!S7]
        [:e :!S8]
        [:d :!Sopen_bracket] ; {
        [:c :!Sclose_bracket] ; }

        [:a :open_bracket] ; [
        [:z :close_bracket] ; ]
        [:s :!S9] ; (
        [:x :!S0] ; )

        [:g :!Sbackslash] ; |
        [:f :!Sslash] ; ?

        [:t :!Sequal_sign] ; +
        [:r :equal_sign] ; =
        [:b :!Shyphen] ; _
        [:v :hyphen] ; -

        [:grave_accent_and_tilde [:hyphen :!Speriod]] ; ->
        [:tab :!Squote] ; "
        [:caps_lock [:!Cslash :!St :!So :!Sd :!So :!Ssemicolon :spacebar]] ; // TODO:
        [:left_shift [:!Cslash :!Sf :!Si :!Sx :!Sm :!Se :!Ssemicolon :spacebar]] ; // FIXME:

        ; Most common
        ; hyphen
        ; underscore
        ; plus
        ; equals
        ; pipe
        ; question mark

        ; Next tier
        ; slash
        ; backslash
        ; arrow (-> )
        ; comment (// )

        ; [:1 :!S1]
        ; [:2 :!S2]
        ; [:3 :!Sequal_sign]
        ; [:4 :!S8]
        ; [:5 :!S5]
        ; [:q :!Sopen_bracket]
        ; [:w :!S9]
        ; [:e :!S3]
        ; [:r :!Squote]
        ; [:t :quote]
        ; [:o :open_bracket] ; [
        ; [:p :close_bracket] ; ]
        ; [:open_bracket :!Sclose_bracket] ; }
        ; [:caps_lock [:km "Match symbols"]]
        ; [:a :slash]
        ; [:s :!Shyphen]
        ; [:d :backslash]
        ; [:f :hyphen]
        ; [:g :!S4]
        ; [:j :equal_sign]
        ; [:l [:hyphen :!Speriod :spacebar]] ; -> arrow (->)
        ; [:semicolon :semicolon]
        [:z :!Sslash]
        [:x :!Sbackslash]
        ; [:c :!S7]
        ; [:v :!Scomma]
        ; [:b [:slash :slash :spacebar]] ; -> //
      ]
    }
  ]

  :applications {
    :VSCode ["^com\\.microsoft\\.VSCode(Insiders)?$"]
    :Chrome [
      "^com\\.google\\.Chrome$",
      "^org\\.chromium\\.Chromium$",
      "^com\\.google\\.Chrome\\.canary$"
    ]
    :Firefoxes [
      "^org\\.mozilla\\.firefox$",
      "^org\\.mozilla\\.firefoxdeveloperedition$"
    ]
    :Terminals [
      "^com\\.apple\\.Terminal$"
      "^com\\.googlecode\\.iterm2$"
      "^co\\.zeit\\.hyperterm$"
      "^co\\.zeit\\.hyper$"
      "^io\\.alacritty$"
      "^net\\.kovidgoyal\\.kitty$"
    ]
    :iTerm ["^com\\.googlecode\\.iterm2$"]
    :Finder ["^com\\.apple\\.finder$"]
    :Notes ["^com\\.apple\\.Notes$"]
    :Messages ["^com\\.apple\\.MobileSMS$"]
    :Calendar ["^com\\.apple\\.iCal$"]
    :Debuggers [
      "^org\\.mozilla\\.firefox$"
    "^org\\.mozilla\\.firefoxdeveloperedition$"
    "^com\\.google\\.Chrome$"
    "^org\\.chromium\\.Chromium$"
    "^com\\.google\\.Chrome\\.canary$"
    "^com\\.apple\\.Safari$"
    "^com\\.microsoft\\.VSCode(Insiders)?$"]
    :Alfred ["^com\\.runningwithcrayons\\.Alfred$"]
    :Keybase ["^keybase\\.Electron$"]
    :Browsers [
      "^org\\.mozilla\\.firefox$"
      "^org\\.mozilla\\.firefoxdeveloperedition$"
      "^com\\.google\\.Chrome$"
      "^org\\.chromium\\.Chromium$"
      "^com\\.google\\.Chrome\\.canary$"
      "^com\\.apple\\.Safari$"
    ]
  }

  ; {
  ;   :des "Disable cmd+tab"
  ;   :rules [
  ;     [:!Ctab :vk_none]
  ;   ]
  ; }
}