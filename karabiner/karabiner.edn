;; !  | means mandatory -   modifier(s) alone when pressend change behavior
;; #  | means optional  -   modifiers are optional (but atleast one necessary)
;; ## | optional any
;; !! | command + control + optional + shift (hyper)
;; C  | left_command (Emacs: hyper)
;; T  | left_control (Emacs: control)
;; O  | left_option (Emacs: meta)
;; S  | left_shift
;; F  | fn (Emacs: super)
;; Q  | right_command (Emacs: control)
;; W  | right_control (Emacs: control)
;; E  | right_option (Emacs: )
;; R  | right_shift

{
  :profiles {
    :Goku {
      :default true
      :sim 40
      :delay 500
      :alone 200
      :held 250
    }
  }
  :simlayer-threshold 210

  :tos {
    :same_wind_app      {:key :grave_accent_and_tilde :modi [:left_command] :lazy true}
    :prev_app           {:key :tab :modi [:left_command] :lazy true}
    :left_paren         {:key :9 :modi [:left_shift] :lazy true}
    :right_paren        {:key :0 :modi [:left_shift] :lazy true}
    :left_control_lazy  {:key :left_control :lazy true}
    :left_cmd_lazy      {:key :left_command :lazy true}
  }

  :modifiers {
    :ro :right_option
  }

  :templates {
    :launch      "osascript -e 'tell application \"Alfred 4\" to run trigger \"launch%s\" in workflow \"yqrashawn.workflow.launcher\" with argument \"\"'"
    :alfred         "open /Applications/Alfred\\ 4.app && osascript -e 'tell application \"Alfred 4\" to run trigger \"%s\" in workflow \"%s\" with argument \"%s\"'"
    :open        "open \"%s\""
    :opena       "open -a \"%s\""
    :show        "osascript -e 'set appName to \"%s\"\nset startIt to false\ntell application \"System Events\"\n  if not (exists process appName) then\n    set startIt to true\n  else\n    set frontmost of process appName to true\n  end if\nend tell\nif startIt then\n  tell application appName to activate\nend if'\n"
    :toggle      "osascript -e 'set appName to \"%s\"\nset startIt to false\ntell application \"System Events\"\n  if not (exists process appName) then\n    set startIt to true\n  else if frontmost of process appName then\n    set visible of process appName to false\n  else\n    set frontmost of process appName to true\n  end if\nend tell\nif startIt then\n  tell application appName to activate\nend if'"
    :type        "osascript -e 'tell application \"System Events\" to keystroke \"%s\" as text'"
    ; Doesn't work :(
    ; :emoji       "osascipt -e 'set the clipboard to \"%s\" \n tell application \"System Events\" to keystroke \"v\" using command down'"
    :unicode      "osascript -e 'tell application \"System Events\" to keystroke (\"%s\" as Unicode text)'"
    ; :focus      "/usr/local/bin/yabai -m display --focus \"%s\" & /usr/local/bin/yabai -m space --focus \"%s\""
  }

  ; Layers: Pro is that you can hold down and do multiple simultaneously. Con is that if you type another character quickly, it won't register
  ; Simlayers: Pro is that it's super robust; can do multiple, never going to type something you don't want. Con is that it slows down the character getting registered (I think by the `:simlayer-threshold` below)

  :simlayers {
    :launch-mode { :key :x }
    ;; :symbol-mode { :key :quote }
  }

  :main [
    ; Plain rule ideas:
      ; Swap ; and : (seems useful, but drifts away from normal keyboard a lot)
      ; Semicolon as shift key (pretty good -- might even help with ⌘+⇧ keybinding ergonomics)
      ; Using simultaneous keypresses to enter some kind of modal/context. ⎋ exits it (see Shawn's "in-context" mode) (this is pretty cool. Plus, I don't think simultaenous rules end up creating lag. Could use it for a lot of things. Examples `s+d`, `j+k`)
      ; Using simultaneous keypresses for singular actions (might be cool, though something to keep an eye on is the difficulty of pressing the keys simultaneously)

    ; Hyper key ideas: (only when used alone -- see Shawn's usage for "left option when used alone")
      ; Left control
      ; Left option

    ; Simlayer ideas:
      ; Having simlayers dependent on the app (Shawn) (`s` mode in VS Code, `s` mode in Chrome, etc.)
      ; Using a simlayer for websites specifically (cool, but not sure if there's enough common websites for this to be worth it)
      ; Having a simlayer for Alfred workflows (see Nikita's) (might be worth it someday, but those workflows are still maturing, and keywords are fine for now)
      ; Using a simlayer for the ctrl key, e.g. `a` (cool, but a simlayer on `a` is going to be hella annoying)
      ; Using a simlayer for mouse controls (might be useful for when we can see the mouse and we just want to bring focus to wherever it is)
      ; Using a simlayer for ⌘+⇧ (Nikita) (useful for ergonomics)
      ; Using a simlayer for ⌘ (Nikita) (useful for ergonomics)
      ; "Clone repo to ~/clones and open with VS Code" (Nikita) (could be cool -- could look into this)
      ; Using a simlayer for media controls (Nikita)
      ; Using a simlayer to control rectangle (this would be nice -- at the very least could do Maximize and Center)
      ; Using a simlayer to control Chrome debug mode (Shawn) (cool because their keyboard shortcuts are lacking sometimes)

    ; Simlayer key ideas
      ; tilde
      ; backslash (currently used as ctrl key)
      ; tab
      ; slash
      ; period
      ; comma
      ; ======
      ; q, w, x, z, j, numbers
      ; https://en.wikipedia.org/wiki/Letter_frequency

    {
      :des "semicolon -> shift"
      ;; NOTE: _Has_ to be the left shift, so we can we right shift as a macro key/hyper key (below)
      :rules [[:semicolon :left_shift nil {:alone :!Ssemicolon}]]
    }
    {
      :des "swap : and ;"
      :rules [
        [:semicolon :!Ssemicolon]
        [:!Ssemicolon :semicolon]
      ]
    }
    {
      :des "left cmd -> cmd+tab"
      :rules [[:left_command :left_command nil {:alone :!Ctab}]]
    }
    {
      :des "left shift -> cmd+b (bold)"
      :rules [[:left_shift :left_shift nil {:alone :!Cb}]]
    }
    {
      :des "caps lock -> escape (alone) left_control (held)"
      :rules [
        ; The mandatory modifiers here are everything except right_shift (it's used down below for caps_lock)
        [:#CTOSFQWEcaps_lock :left_control_lazy nil {:alone :escape}]
      ]
    }
    {
      :des "enter -> enter (alone) left_control (held)"
      :rules [
        [:##return_or_enter :left_control_lazy nil {:alone :return_or_enter}]
      ]
    }
    {
      :des "right_shift + caps_lock -> caps_lock"
      :rules [
        [:!Rcaps_lock :caps_lock]
      ]
    }
    {
      :des "App-specific overrides"
      :rules [
        ; Messages
        [:!Cj :!Ttab :Messages]
        [:!Ck :!TStab :Messages]

        ; Calendar
        [:!Cj :!Cright_arrow :Calendar]
        [:!Ck :!Cleft_arrow :Calendar]

        ; In Chrome, use left_option+enter to return focus to the document (Chrome doesn't provide any way to do this natively)
        ; Keybindings do this: 1) Focus the omnibar 2) type `j`, then `↵`. This runs a "search" I have in Chrome that runs Javascript that focuses the root "frame" of the document. Running Javascript altogether will focus the document, and focusing the root frame helps return focus after an <iframe> has stolen it
        [:!Tspacebar [:!Cl :j :return_or_enter :g :!Sf] :Chrome]
        ; A backup (open preferences, then close the preferences tab)
        ; [:!Oreturn_or_enter [:!Ccomma :!Cw]]

        ; Allow our custom Vim jump navigation with brackets in the terminal. This needs to be done specially for the terminal, since <C-[> specifically means ESC in the terminal
        [:!Topen_bracket :!To :Terminals]
        [:!Tclose_bracket :!Ti :Terminals]

        ; Cmd+Esc to stop screenshot video
        [:!Cescape :!CTescape]
      ]
    }
    {
      :des "iTerm shortcuts"
      :rules [
        :iTerm

        ; Panes
        ;;;;;
        ; Navigating between panes
        [:!CSh :!Copen_bracket]
        [:!CSl :!Cclose_bracket]
        ; Split pane right
        [:!Csemicolon :!Cd]
        ; Split pane down
        [:!CSsemicolon :!CSd]
      ]
    }

    {
      :des "launch mode (non-j)"
      :rules [
        :launch-mode
        ;  Most common apps
        ; Home row right
        ; *Just* browsin'
        [:h [:opena "Google Chrome"] :!Chrome]
        [:h :same_wind_app :Chrome]
        ; VS Code
        [:k [:opena "Visual Studio Code"] :!VSCode]
        [:k :same_wind_app :VSCode]
        ; Some same/left hand alternatives
        [:c [:opena "Google Chrome"] :!Chrome]
        [:c :same_wind_app :Chrome]
        [:v [:opena "Visual Studio Code"] :!VSCode]
        [:v :same_wind_app :VSCode]
        ;  sLack
        [:l [:opena "Slack"]]
        ; [:l [:opena "Slack Web"]]
        [:semicolon [:opena "iTerm"]]

        ; Also common
        ;  Notes
        [:n [:opena "Notes"]]
        [:m [:opena "Trello"]]
        [:u [:opena "Spotify"]]
        [:i [:opena "Messages"]]
        ; Office
        [:o [:opena "Office"]]
        [:y [:opena "Calendar"]]
        [:close_bracket [:open "https://calendar.google.com/calendar/u/1/r"]]
        [:comma [:opena "System Preferences"]]
        [:period [:opena "Alfred Preferences"]]
        [:open_bracket [:opena "Preview"]]
        [:slash [:opena "Finder"]]

        ; Less common
        [:backslash [:opena "Activity Monitor"]]
        [:8 [:opena "Karabiner-Elements"]]
        [:7 [:opena "Karabiner-EventViewer"]]
      ]
    }

    {
      :des "Text navigation and manipulation"
      :rules [
        ; Char and word-wise nav
        [:!T#SRh :left_arrow]
        [:!T#SRj :down_arrow]
        [:!T#SRk :up_arrow]
        [:!T#SRl :right_arrow]
        [:!T#SRy :!Oleft_arrow]
        [:!T#SRo :!Oright_arrow]

        ; Char and word-wise deletion
        [:!Tu :!Odelete_or_backspace]
        [:!Ti :delete_or_backspace]
        [:!T7 :!Odelete_forward]
        [:!T8 :delete_forward]

        ; To start and end of line
        [:!T#SRn :!Cleft_arrow :!Terminals]
        [:!T#SRm :!Cright_arrow :!Terminals]
        ; Terminal doesn't support ⌘ like above, so gotta use its Cocoa keybindings
        [:!Tn :!Ta :Terminals]
        [:!Tm :!Te :Terminals]

        ; Line deletion
        ; Use Cocoa emacs bindings for apps that doesn't support ⌘+⌦ (i.e. Notes, Terminal)
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        ; Delete line backward
        [:!Tcomma :!Cdelete_or_backspace [:!Terminals]]
        [:!Tcomma :!Tu [:Terminals]]
        ; Delete line forward
        ; Ideally this would just be ⌘+⌦, but that's not respected everywhere (e.g. browser textareas, VS Code's integrated terminals)
        [:!Tperiod [:!CSright_arrow :delete_or_backspace] [:!Notes :!Terminals :!VSCode]]
        [:!Tperiod :!Tk]
        ; Delete full line
        [:!Tslash [:!Cright_arrow :!Cdelete_or_backspace] [:!Terminals :!VSCode]]
        ; Terminals don't support ⌘+← or ⌘+⌦. So instead, we rely on the original Cocoa Emacs commands for them
        [:!Tslash [:!Te :!Tu] :Terminals]
        ; For VS Code, it's trickier -- you want to preserve indentation, but also want it to behave nicely in the integrated terminal…
        [:!Tslash [:!Cright_arrow :!Cdelete_or_backspace] :VSCode]

        ; Clear everything
        [:!Tdelete_or_backspace [:!Ca :delete_or_backspace]]

        ; Page up/down
        [:!Oj :page_down]
        [:!Ok :page_up]
      ]
    }

    {
      :des "macros (with right shift)"
      :rules [
        ; Screenshots
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        ; Copy screenshot of selected area
        [:!Rc :!CTS4]
        ; Save screenshot of selected area to screenshots dir (using Alfred workflow)
        [:!Rd :!CTSOd]

        ; Rectangle
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        ; Window resizing
        [:!Ra :!CTOa]
        [:!Rs :!CTOs]
        ; Left/right half of current monitor
        [:!Rq :!TOh]
        [:!Rw :!TOl]
        ; Move to next/prev monitor
        [:!Rz :!CTOh]
        [:!Rx :!CTOl]

        ; Alfred
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        [:!Rb [:alfred "history" "com.apple.alfred.workflow.chromium-hist"]]
        [:!Rt [:alfred "bookmarks" "com.apple.alfred.workflow.chromium-hist"]]
        [:!Rr [:alfred "recent history" "com.thomasupton.chrome-history"]]
        ; [:!Rb [:alfred "battery" "com.aronhafner.alfred-battery" "level"]]
        ; Toggle AirPod connection. Using an external trigger doesn't work because it spawns the Alfred search bar (https://www.alfredforum.com/topic/16568-external-trigger-is-showing-search-bar-when-not-necessary/?do=findComment&comment=84848)
        [:!R4 :!CSTOa]
      ]
    }

    {
      :des "symbol mode"
      :rules [
        :symbol-mode

        [:1 :!S1]
        [:2 :!S2]
        [:3 :!S3]
        [:4 :!S4]
        [:4 :!S5]
        [:q :!S6]
        [:w :!S7]
        [:e :!S8]
        [:d :!Sopen_bracket] ; {
        [:c :!Sclose_bracket] ; }

        [:a :open_bracket] ; [
        [:z :close_bracket] ; ]
        [:s :!S9] ; (
        [:x :!S0] ; )

        [:g :!Sbackslash] ; |
        [:f :!Sslash] ; ?

        [:t :!Sequal_sign] ; +
        [:r :equal_sign] ; =
        [:b :!Shyphen] ; _
        [:v :hyphen] ; -

        [:grave_accent_and_tilde [:hyphen :!Speriod]] ; ->
        [:tab :!Squote] ; "
        [:caps_lock [:!Cslash :!St :!So :!Sd :!So :!Ssemicolon :spacebar]] ; // TODO:
        [:left_shift [:!Cslash :!Sf :!Si :!Sx :!Sm :!Se :!Ssemicolon :spacebar]] ; // FIXME:

        ; Most common
        ; hyphen
        ; underscore
        ; plus
        ; equals
        ; pipe
        ; question mark

        ; Next tier
        ; slash
        ; backslash
        ; arrow (-> )
        ; comment (// )

        ; [:1 :!S1]
        ; [:2 :!S2]
        ; [:3 :!Sequal_sign]
        ; [:4 :!S8]
        ; [:5 :!S5]
        ; [:q :!Sopen_bracket]
        ; [:w :!S9]
        ; [:e :!S3]
        ; [:r :!Squote]
        ; [:t :quote]
        ; [:o :open_bracket] ; [
        ; [:p :close_bracket] ; ]
        ; [:open_bracket :!Sclose_bracket] ; }
        ; [:caps_lock [:km "Match symbols"]]
        ; [:a :slash]
        ; [:s :!Shyphen]
        ; [:d :backslash]
        ; [:f :hyphen]
        ; [:g :!S4]
        ; [:j :equal_sign]
        ; [:l [:hyphen :!Speriod :spacebar]] ; -> arrow (->)
        ; [:semicolon :semicolon]
        [:z :!Sslash]
        [:x :!Sbackslash]
        ; [:c :!S7]
        ; [:v :!Scomma]
        ; [:b [:slash :slash :spacebar]] ; -> //
      ]
    }
  ]

  :applications {
    :VSCode ["^com\\.microsoft\\.VSCode(Insiders)?$"]
    :Chrome [
      "^com\\.google\\.Chrome$",
      "^org\\.chromium\\.Chromium$",
      "^com\\.google\\.Chrome\\.canary$"
    ]
    :Firefoxes [
      "^org\\.mozilla\\.firefox$",
      "^org\\.mozilla\\.firefoxdeveloperedition$"
    ]
    :Terminals [
      "^com\\.apple\\.Terminal$"
      "^com\\.googlecode\\.iterm2$"
      "^co\\.zeit\\.hyperterm$"
      "^co\\.zeit\\.hyper$"
      "^io\\.alacritty$"
      "^net\\.kovidgoyal\\.kitty$"
    ]
    :iTerm ["^com\\.googlecode\\.iterm2$"]
    :Finder ["^com\\.apple\\.finder$"]
    :Notes ["^com\\.apple\\.Notes$"]
    :Messages ["^com\\.apple\\.MobileSMS$"]
    :Calendar ["^com\\.apple\\.iCal$"]
    :Debuggers [
      "^org\\.mozilla\\.firefox$"
    "^org\\.mozilla\\.firefoxdeveloperedition$"
    "^com\\.google\\.Chrome$"
    "^org\\.chromium\\.Chromium$"
    "^com\\.google\\.Chrome\\.canary$"
    "^com\\.apple\\.Safari$"
    "^com\\.microsoft\\.VSCode(Insiders)?$"]
    :Alfred ["^com\\.runningwithcrayons\\.Alfred$"]
    :Keybase ["^keybase\\.Electron$"]
    :Browsers [
      "^org\\.mozilla\\.firefox$"
      "^org\\.mozilla\\.firefoxdeveloperedition$"
      "^com\\.google\\.Chrome$"
      "^org\\.chromium\\.Chromium$"
      "^com\\.google\\.Chrome\\.canary$"
      "^com\\.apple\\.Safari$"
    ]
  }

  ; {
  ;   :des "Disable cmd+tab"
  ;   :rules [
  ;     [:!Ctab :vk_none]
  ;   ]
  ; }
}